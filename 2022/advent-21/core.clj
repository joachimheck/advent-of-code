(ns advent-21.core)

(require '[clojure.pprint :as pp])
(require '[clojure.repl :refer :all])
(require '[clojure.string :as str])
(require '[clojure.set :as set])

(def small-input "small-input.txt")
(def large-input "large-input.txt")

(defn read-lines [f]
  (with-open [rdr (clojure.java.io/reader f)]
    (vec (doall(line-seq rdr)))))

;; Part 1
;; Figure out the result of the monkeys' mathematical riddle.
(defn parse-input [f]
  (map (fn [line]
         (let [match-1 (re-matches #"(.+?): (\d+)" line)
               match-2 (re-matches #"(.+?): (.+) ([\\+-\\*/]) (.+)" line)]
           (rest (first (remove nil? [match-1 match-2])))))
       (read-lines f)))

(defn map-simple-monkeys [monkeys]
  (reduce (fn [m [k v]] (assoc m k (Long/parseLong v))) {} (filter #(= 2 (count %)) monkeys)))

(defn get-monkey [monkey monkeys]
  (first (filter #(= (first %) monkey) monkeys)))

(defn get-monkey-number [monkey-name monkeys numbers]
  (let [monkey-number (get numbers monkey-name)]
    (if monkey-number monkey-number
        (let [[_ sub-1 op sub-2 :as monkey] (get-monkey monkey-name monkeys)
              num-1 (get-monkey-number sub-1 monkeys numbers)
              num-2 (get-monkey-number sub-2 monkeys numbers)
              op-string (str/join (list "(" op " " num-1 " " num-2 ")"))]
          (load-string op-string)))))

(defn get-root-number [f]
  (let [monkeys (parse-input f)
        numbers (map-simple-monkeys monkeys)]
    (get-monkey-number "root" monkeys numbers)))

;; (time (get-root-number small-input))
;; "Elapsed time: 4.5532 msecs"
;; 152
;; (time (get-root-number large-input))
;; "Elapsed time: 805.468 msecs"
;; 157714751182692



;; Part 2
;; Monkey "humn" is me! Figure out what number I need to yell for root to get two equal numbers.
(defn get-humn-number [f]
  (let [monkeys (parse-input f)
        start-numbers (assoc (map-simple-monkeys monkeys) "humn" 0)
        [_ sub-1 _ sub-2] (get-monkey "root" monkeys)
        constants (let [[test-sub-1-a test-sub-1-b test-sub-2-a test-sub-2-b]
                        (list (get-monkey-number sub-1 monkeys start-numbers)
                              (get-monkey-number sub-1 monkeys (assoc start-numbers "humn" 1))
                              (get-monkey-number sub-2 monkeys start-numbers)
                              (get-monkey-number sub-2 monkeys (assoc start-numbers "humn" 1)))]
                    (merge (if (= test-sub-1-a test-sub-1-b)
                             (assoc {} sub-1 test-sub-1-a)
                             {})
                           (if (= test-sub-2-a test-sub-2-b)
                             (assoc {} sub-2 test-sub-2-a)
                             {})))
        max-num (* 4096 Integer/MAX_VALUE)]
    ;; (println constants)
    (loop [i (/ (- max-num 1) 2)
           min-i 0
           max-i max-num
           prev-i -1]
      (let [numbers (assoc start-numbers "humn" i)
            num-1 (if (get constants sub-1) (get constants sub-1) (get-monkey-number sub-1 monkeys numbers))
            num-2 (if (get constants sub-2) (get constants sub-2) (get-monkey-number sub-2 monkeys numbers))]
        (println i "(" min-i max-i ")" ":" (long num-1) (long num-2))
        ;; (println (- max-i i) "=>" (long (- max-i i)))
        ;; (println (/ (- max-i i) 2) "=>" (long (/ (- max-i i) 2)))
        ;; (println (+ i (/ (- max-i i) 2)) "=>" (long (+ i (/ (- max-i i) 2))))
        (cond
          (= num-1 num-2) i
          (= min-i max-i) :fail
          (= i prev-i) :fail
          ;; For large input, swap these recur statements.
          (> num-1 num-2)
          (recur (long (+ min-i (/ (- i min-i) 2))) min-i i i)
          (< num-1 num-2)
          (recur (long (+ i (/ (- max-i i) 2))) i max-i i)
          )))))


;; (time (get-humn-number small-input))
;; 8796093018111/2 ( 0 8796093018112 ) : 2199023254527 150
;; 2199023254527 ( 0 8796093018111/2 ) : 1099511627263 150
;; 1099511627263 ( 0 2199023254527 ) : 549755813631 150
;; 549755813631 ( 0 1099511627263 ) : 274877906815 150
;; 274877906815 ( 0 549755813631 ) : 137438953407 150
;; 137438953407 ( 0 274877906815 ) : 68719476703 150
;; 68719476703 ( 0 137438953407 ) : 34359738351 150
;; 34359738351 ( 0 68719476703 ) : 17179869175 150
;; 17179869175 ( 0 34359738351 ) : 8589934587 150
;; 8589934587 ( 0 17179869175 ) : 4294967293 150
;; 4294967293 ( 0 8589934587 ) : 2147483646 150
;; 2147483646 ( 0 4294967293 ) : 1073741822 150
;; 1073741823 ( 0 2147483646 ) : 536870911 150
;; 536870911 ( 0 1073741823 ) : 268435455 150
;; 268435455 ( 0 536870911 ) : 134217727 150
;; 134217727 ( 0 268435455 ) : 67108863 150
;; 67108863 ( 0 134217727 ) : 33554431 150
;; 33554431 ( 0 67108863 ) : 16777215 150
;; 16777215 ( 0 33554431 ) : 8388607 150
;; 8388607 ( 0 16777215 ) : 4194303 150
;; 4194303 ( 0 8388607 ) : 2097151 150
;; 2097151 ( 0 4194303 ) : 1048575 150
;; 1048575 ( 0 2097151 ) : 524287 150
;; 524287 ( 0 1048575 ) : 262143 150
;; 262143 ( 0 524287 ) : 131071 150
;; 131071 ( 0 262143 ) : 65535 150
;; 65535 ( 0 131071 ) : 32767 150
;; 32767 ( 0 65535 ) : 16383 150
;; 16383 ( 0 32767 ) : 8191 150
;; 8191 ( 0 16383 ) : 4095 150
;; 4095 ( 0 8191 ) : 2047 150
;; 2047 ( 0 4095 ) : 1023 150
;; 1023 ( 0 2047 ) : 511 150
;; 511 ( 0 1023 ) : 255 150
;; 255 ( 0 511 ) : 127 150
;; 383 ( 255 511 ) : 191 150
;; 319 ( 255 383 ) : 159 150
;; 287 ( 255 319 ) : 143 150
;; 303 ( 287 319 ) : 151 150
;; 295 ( 287 303 ) : 147 150
;; 299 ( 295 303 ) : 149 150
;; 301 ( 299 303 ) : 150 150
;; "Elapsed time: 464.8959 msecs"
;; 301


;; The direction has to be reversed for the large input.
;; (time (get-humn-number large-input))
;; 8796093018111/2 ( 0 8796093018112 ) : 35577138780444 51928434600306
;; 2199023254527 ( 0 8796093018111/2 ) : 70681727696273 51928434600306
;; 3298534881791 ( 2199023254527 8796093018111/2 ) : 53129433238362 51928434600306
;; 3848290695423 ( 3298534881791 8796093018111/2 ) : 44353286009407 51928434600306
;; 3573412788607 ( 3298534881791 3848290695423 ) : 48741359623885 51928434600306
;; 3435973835199 ( 3298534881791 3573412788607 ) : 50935396431123 51928434600306
;; 3367254358495 ( 3298534881791 3435973835199 ) : 52032414834743 51928434600306
;; 3401614096847 ( 3367254358495 3435973835199 ) : 51483905632933 51928434600306
;; 3384434227671 ( 3367254358495 3401614096847 ) : 51758160233838 51928434600306
;; 3375844293083 ( 3367254358495 3384434227671 ) : 51895287534290 51928434600306
;; 3371549325789 ( 3367254358495 3375844293083 ) : 51963851184517 51928434600306
;; 3373696809436 ( 3371549325789 3375844293083 ) : 51929569359404 51928434600306
;; 3374770551259 ( 3373696809436 3375844293083 ) : 51912428446855 51928434600306
;; 3374233680347 ( 3373696809436 3374770551259 ) : 51920998903137 51928434600306
;; 3373965244891 ( 3373696809436 3374233680347 ) : 51925284131278 51928434600306
;; 3373831027163 ( 3373696809436 3373965244891 ) : 51927426745349 51928434600306
;; 3373763918299 ( 3373696809436 3373831027163 ) : 51928498052384 51928434600306
;; 3373797472731 ( 3373763918299 3373831027163 ) : 51927962398867 51928434600306
;; 3373780695515 ( 3373763918299 3373797472731 ) : 51928230225625 51928434600306
;; 3373772306907 ( 3373763918299 3373780695515 ) : 51928364139005 51928434600306
;; 3373768112603 ( 3373763918299 3373772306907 ) : 51928431095695 51928434600306
;; 3373766015451 ( 3373763918299 3373768112603 ) : 51928464574039 51928434600306
;; 3373767064027 ( 3373766015451 3373768112603 ) : 51928447834867 51928434600306
;; 3373767588315 ( 3373767064027 3373768112603 ) : 51928439465281 51928434600306
;; 3373767850459 ( 3373767588315 3373768112603 ) : 51928435280488 51928434600306
;; 3373767981531 ( 3373767850459 3373768112603 ) : 51928433188091 51928434600306
;; 3373767915995 ( 3373767850459 3373767981531 ) : 51928434234289 51928434600306
;; 3373767883227 ( 3373767850459 3373767915995 ) : 51928434757388 51928434600306
;; 3373767899611 ( 3373767883227 3373767915995 ) : 51928434495839 51928434600306
;; 3373767891419 ( 3373767883227 3373767899611 ) : 51928434626614 51928434600306
;; 3373767895515 ( 3373767891419 3373767899611 ) : 51928434561226 51928434600306
;; 3373767893467 ( 3373767891419 3373767895515 ) : 51928434593920 51928434600306
;; 3373767892443 ( 3373767891419 3373767893467 ) : 51928434610267 51928434600306
;; 3373767892955 ( 3373767892443 3373767893467 ) : 51928434602093 51928434600306
;; 3373767893211 ( 3373767892955 3373767893467 ) : 51928434598007 51928434600306
;; 3373767893083 ( 3373767892955 3373767893211 ) : 51928434600050 51928434600306
;; 3373767893019 ( 3373767892955 3373767893083 ) : 51928434601072 51928434600306
;; 3373767893051 ( 3373767893019 3373767893083 ) : 51928434600561 51928434600306
;; 3373767893067 ( 3373767893051 3373767893083 ) : 51928434600306 51928434600306
;; "Elapsed time: 66380.9593 msecs"
;; 3373767893067
