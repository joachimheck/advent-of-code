  012345678901234567890123456789012345678901234567890123456789
 1 + - + - + - + - + - + - + - + + - + - + - + - + - + - + - +
 2  ++  --  ++  --  ++  --  ++  ++  --  ++  --  ++  --  ++  --
 3   +++   ---   +++   ---   +++   ---   +++   ---   +++   ---
 4    ++++    ----    ++++    ----    ++++    ----    ++++    
 5     +++++     -----     +++++     -----     +++++     -----
 6      ++++++      ------      ++++++      ------      ++++++
 7       +++++++       -------       +++++++       -------    
 8        ++++++++        --------        ++++++++        ----
 9         +++++++++         ---------         +++++++++      
10          ++++++++++          ----------          ++++++++++


1: term-10: digit-0 term-11: digit-1
2: term-20: (+ term-10 term-11) term-21: (+ term-12 term-13)
3: term-30: (+ term-10 term-11 term-12) term-31: (+ term-13 term-14 term-15)
4: term-40: (+ term-20 term-21) term-41: (+ term-22 term-23)
5: term-50: (+ term-20 term-21 term-14) term-51: (+ term-15 term-23 term-24)

I'm thinking I can check each digit in a pattern block to see if it lines up with a pattern block
from a previous digit. Once it does, I add in that previous block and repeat the process starting
from the next digit in the block. This seems only to be required for odd-numbered digits; the even
digit blockss can always be broken up into half-size blocks.

Example: digit 7 pattern block 1 (digits 7-13)
  Digit 7 isn't the start of any previous block until the blocks for digit 1: digit 1 block 7, length 1
  Digit 8 is the start of digit 4 block 2, length 4
  Digit 12 is the start of digit 2 block 6, length 2
  We've exhausted all the digits in the block.


    0  1  2  3  4  5  6  7  8  SUM DIGIT
 1  0  1  2  3  4  5  6  7  8   -4     4
 2  1  5  9 13  8               -8     8
 3  3 12 21                     12     2
 4  6 22  8                     22     2
 5 10 26                        26     6
 6 15 21                        21     1
 7 21 15                        15     5
 8 28  8                         8     8

there are 19 computable blocks
8 blocks are actually used
should compute: 2/1 2/3 2/5 3/0 3/1 3/2 4/1 5/1 6/1 7/1 8/1

    0  1  2  3  4  5  6  7  8
 1  0  1  2  3  4  5  6  7  8
 2  x  5  9 13  x
 3  x 12  x
 4  x 22  x
 5  x 26
 6  x 21
 7  x 15
 8  x  8

3/0 [1/0 1/1] + 1/2 => [0 1] + 2 => 3
3/1 [1/3 1/4] + 1/5 => [3 4] + 5 => 12
3/2 [1/6 1/7] + 1/8 => [6 7] + 8 => 21
5/0 [2/0 2/1] + 1/4 => [1 5] + 4 => 10
5/1 [2/3 2/4] + 1/5 => [13 8] + 5 => 26
7/0 [3/0 3/1] + 1/6 => [3 12] + 6 => 21
7/1 [3/3 3/4] + 1/7 => [x x] + 7 => 28

There isn't always a single extra digit:

[0 1 2] [3 4 5] [6 x x]
                [x 7 8] [9 10 11] [12 13 x]
[0 1 2 3] [4 5 6 x]
          [x x x 7] [8 9 10 11] [12 13 x x]


For signal 123456781234567812345678

1: 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8
2: 0 2 3 0 0 6 7 0 0 2 3 0 0 6 7 0 0 2 3 0 0 6 7 0
3: 0 0 3 4 5 0 0 0 1 2 3 0 0 0 7 8 1 0 0 0 5 6 7 0
7: 0 0 0 0 0 0 7 8 1 2 3 4 5 0 0 0 0 0 0 0 5 6 7 8
=> (- (+ 7 8 1 2 3 4 5) (+ 5 6 7 8)) = 4

but computing by block, I get 3, from block sums 30 and 27.
The second block should be 26.

blocks
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
1: 0 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8
2:   1   5   9  13   9   5   9  13   9   5   9  13 8
3:     3    12    21     6    15    16     9    18 8
4:       6      22      14      22      14      22 8
7:            21            30            31      26
8:              28              36              36 8

[7 2]: (+ 6 7 8 1 2 3 4) = 31
[7 2]: [2 7] + [4 4] + [1 20] => (+ 13 14 4) = 31

