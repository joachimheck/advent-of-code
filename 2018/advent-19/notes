simplified initial jump
#ip 5

r2 = 836 ; 2 * 2 * 19 * 11
r1 = 216 ; 9 * 22 + 18
r2 = 1052 ; r2 + r1
r1 = 10550400 ; (27 * 28 + 29) * 30 * 14 * 32
r2 = 10551430 ; r2 + r1
r0 = 0
  
do {
  do {
    for (r4 = 1; r4 <= r2; r4++) {
      for (r3 = 1; r3 <= r2; r3++) {
        if (r3 * r4 == r2) {
          r0 = r0 + r4
	}
      }
    }
    
    exit
    
    A:
    r2 = (r2 + 2) * (r2 + 2) * 19 * 11
    r1 = (r1 + 8) * 22 + 18
    r2 = r2 + r1
  } while (r0 == 0) ; NOTE: If r0 > 0, we jump +r0.
    
  r1 = (27 * 28 + 29) * 30 * 14 * 32
  r2 = r2 + r1
  r0 = 0
} while (true)




cleaned up math
#ip 5

r2 = 836 ; 2 * 2 * 19 * 11
r1 = 194 ; 8 * 22 + 18
r2 = 1030 ; r2 + r1
r1 = 10550400 ; (27 * 28 + 29) * 30 * 14 * 32
r2 = 10551452 ; r2 + r1
r0 = 0
  
do {
  do {
    for (r4 = 1; r4 <= r2; r4++) {
      for (r3 = 1; r3 <= r2; r3++) {
        if (r3 * r4 == r2) {
          r0 = r0 + r4
	}
      }
    }
    
    exit
    
    A:
    r2 = (r2 + 2) * (r2 + 2) * 19 * 11
    r1 = (r1 + 8) * 22 + 18
    r2 = r2 + r1
  } while (r0 == 0) ; NOTE: If r0 > 0, we jump +r0.
    
  r1 = (27 * 28 + 29) * 30 * 14 * 32
  r2 = r2 + r1
  r0 = 0
} while (true)





for loops
#ip 5
jmp A (17)
  
do {
  do {
    for (r4 = 1; r4 <= r2; r4++) {
      for (r3 = 1; r3 <= r2; r3++) {
        if (r3 * r4 == r2) {
          r0 = r0 + r4
	}
      }
    }
    
    exit
    
    A:
    r2 = (r2 + 2) * (r2 + 2) * 19 * 11
    r1 = (r1 + 8) * 22 + 18
    r2 = r2 + r1
  } while (r0 == 0) ; NOTE: If r0 > 0, we jump +r0.
    
  r1 = (27 * 28 + 29) * 30 * 14 * 32
  r2 = r2 + r1
  r0 = 0
} while (true)





do/while loops
#ip 5
jmp A (17)
  
do {
  do {
    do {
      r4 = 1
      
      do {
        r3 = 1
        r1 = r4 * r3
        r1 = (r4 * r3 == r2)
        
        if (r3 * r4 == r2) {
          r0 = r0 + r4
        }
        
        r3 = r3 + 1
        
      } while (r3 <= r2)

      r4 = r4 + 1
      
    } while (r4 <= r2)
    
    exit
    
    A:

    r2 = (r2 + 2) * (r2 + 2) * 19 * 11
    r1 = (r1 + 8) * 22 + 18
    r2 = r2 + r1
  } while (r0 == 0) ; NOTE: If r0 > 0, we jump +r0.
    
  r1 = (27 * 28 + 29) * 30 * 14 * 32
  r2 = r2 + r1
  r0 = 0
} while (true)





original code removed
#ip 5
D:
jmp A (17)

C:
r4 = 1

B:
r3 = 1
r1 = r4 * r3
r1 = (r4 * r3 == r2)

if (r3 * r4 == r2) {
  r0 = r0 + r4
}

r3 = r3 + 1

if (r3 <= r2) jmp B
r4 = r4 + 1

if (r4 <= r2) jmp C

exit

A:
r2 = r2 + 2
r2 = r2 * r2
r2 = r5 * r2 (19 * r2)
r2 = r2 * 11
r1 = r1 + 8
r1 = r1 * r5 (r1 * 22)
r1 = r1 + 18
r2 = r2 + r1

; If r0 > 0, we jump +r0.
if (r0 == 0) {
  jmp C
}

r1 = r5 (r1 = 27)
r1 = r1 * r5 (r1 * 28)
r1 = r5 + r1 (29 + r1)
r1 = r5 * r1 (30 * r1)
r1 = r1 * 14
r1 = r1 * r5 (r1 * 32)
r2 = r2 + r1
r0 = 0

jmp C




numbered; jumps
#ip 5
 0 addi 5 16 5 ; jmp +16
 1 seti 1   4
 2 seti 1   3
 3 mulr 4 3 1
 4 eqrr 1 2 1
 5 addr 1 5 5 ; jmp ip+r1
 6 addi 5 1 5 ; jmp +1
 7 addr 4 0 0
 8 addi 3 1 3
 9 gtrr 3 2 1
10 addr 5 1 5 ; jmp ip+r1
11 seti 2   5 ; jmp 2
12 addi 4 1 4
13 gtrr 4 2 1
14 addr 1 5 5 ; jmp ip+r1
15 seti 1   5 ; jmp 1
16 mulr 5 5 5 ; jmp ip*ip = jmp 256 = exit
17 addi 2 2 2
18 mulr 2 2 2
19 mulr 5 2 2
20 muli 2 11 2
21 addi 1 8 1
22 mulr 1 5 1
23 addi 1 18 1
24 addr 2 1 2
25 addr 5 0 5 ; jmp ip+r0
26 seti 0   5 ; jmp 0
27 setr 5   1
28 mulr 1 5 1
29 addr 5 1 1
30 mulr 5 1 1
31 muli 1 14 1
32 mulr 1 5 1
33 addr 2 1 2
34 seti 0   0
35 seti 0   5 ; jmp 0



original:
#ip 5
addi 5 16 5
seti 1 8 4
seti 1 5 3
mulr 4 3 1
eqrr 1 2 1
addr 1 5 5
addi 5 1 5
addr 4 0 0
addi 3 1 3
gtrr 3 2 1
addr 5 1 5
seti 2 5 5
addi 4 1 4
gtrr 4 2 1
addr 1 5 5
seti 1 2 5
mulr 5 5 5
addi 2 2 2
mulr 2 2 2
mulr 5 2 2
muli 2 11 2
addi 1 8 1
mulr 1 5 1
addi 1 18 1
addr 2 1 2
addr 5 0 5
seti 0 7 5
setr 5 0 1
mulr 1 5 1
addr 5 1 1
mulr 5 1 1
muli 1 14 1
mulr 1 5 1
addr 2 1 2
seti 0 0 0
seti 0 9 5
