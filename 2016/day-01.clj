(ns day-01.core
  (:require [clojure.pprint :as pp]
            [clojure.repl :refer :all]
            [clojure.string :as str]
            [clojure.set :as set]))

;; Part 1
(def real-input '((:L 4) (:R 2) (:R 4) (:L 5) (:L 3) (:L 1) (:R 4) (:R 5) (:R 1) (:R 3) (:L 3) (:L 2) (:L 2) (:R 5) (:R 1) (:L 1) (:L 2) (:R 2) (:R 2) (:L 5) (:R 5) (:R 5) (:L 2) (:R 1) (:R 2) (:L 2) (:L 4) (:L 1) (:R 5) (:R 2) (:R 1) (:R 1) (:L 2) (:L 3) (:R 2) (:L 5) (:L 186) (:L 5) (:L 3) (:R 3) (:L 5) (:R 4) (:R 2) (:L 5) (:R 1) (:R 4) (:L 1) (:L 3) (:R 3) (:R 1) (:L 1) (:R 4) (:R 2) (:L 1) (:L 4) (:R 5) (:L 1) (:R 50) (:L 4) (:R 3) (:R 78) (:R 4) (:R 2) (:L 4) (:R 3) (:L 4) (:R 4) (:L 1) (:R 5) (:L 4) (:R 1) (:L 2) (:R 3) (:L 2) (:R 5) (:R 5) (:L 4) (:L 1) (:L 2) (:R 185) (:L 5) (:R 2) (:R 1) (:L 3) (:R 4) (:L 5) (:R 2) (:R 4) (:L 3) (:R 4) (:L 2) (:L 5) (:R 1) (:R 2) (:L 2) (:L 1) (:L 2) (:R 2) (:L 2) (:R 1) (:L 5) (:L 3) (:L 4) (:L 3) (:L 4) (:L 2) (:L 5) (:L 5) (:R 2) (:L 3) (:L 4) (:R 4) (:R 4) (:R 5) (:L 4) (:L 2) (:R 4) (:L 5) (:R 3) (:R 1) (:L 1) (:R 3) (:L 2) (:R 2) (:R 1) (:R 5) (:L 4) (:R 5) (:L 3) (:R 2) (:R 3) (:R 1) (:R 4) (:L 4) (:R 1) (:R 3) (:L 5) (:L 1) (:L 3) (:R 2) (:R 1) (:R 4) (:L 4) (:R 3) (:L 3) (:R 3) (:R 2) (:L 3) (:L 3) (:R 4) (:L 2) (:R 4) (:L 3) (:L 4) (:R 5) (:R 1) (:L 1) (:R 5) (:R 3) (:R 1) (:R 3) (:R 4) (:L 1) (:R 4) (:R 3) (:R 1) (:L 5) (:L 5) (:L 4) (:R 4) (:R 3) (:L 2) (:R 1) (:R 5) (:L 3) (:R 4) (:R 5) (:L 4) (:L 5) (:R 2)))

(defn get-dir [current turn]
 (let [dirs '(:N :E :S :W)]
   (nth
    (drop-while #(not= % current) (cycle dirs))
    (if (= turn :R) 1 3))))

(defn endpoint [directions]
  (reduce
   (fn [acc [turn dist]]
     (let [new-dir (get-dir (get acc :dir) turn)]
       (assoc
        (case new-dir
          :N (update acc :pos (fn [[x y]] [x (+ y dist)]))
          :E (update acc :pos (fn [[x y]] [(+ x dist) y]))
          :S (update acc :pos (fn [[x y]] [x (- y dist)]))
          :W (update acc :pos (fn [[x y]] [(- x dist) y])))
        :dir new-dir)))
   {:pos [0 0] :dir :N}
   directions))

(defn distance-to [[x y]]
  (+ (Math/abs x) (Math/abs y)))

(def test-input-1 '((:R 2) (:L 3)))

(let [endpt (endpoint real-input)]
  (list (distance-to (get endpt :pos))
        endpt))
;; => (353 {:pos [145 208], :dir :S})


;; Part 2
;; Find the first location that is visited twice.
;; The location may not be at the end of one of the directions.
(defn path [pos dir dist]
  (let [move-fn (case dir
                  :N (fn [[x y]] [x (inc y)])
                  :E (fn [[x y]] [(inc x) y])
                  :S (fn [[x y]] [x (dec y)])
                  :W (fn [[x y]] [(dec x) y]))]
    (take dist (drop 1 (iterate move-fn pos)))))

(defn first-revisit [directions]
  (reduce
   (fn [acc [turn dist]]
     (let [new-dir (get-dir (get acc :dir) turn)
           path (path (get acc :pos) new-dir dist)
           new-pos (last path)]
        (-> acc
            (assoc :dir new-dir)
            (assoc :pos new-pos)
            ((fn [result]
               (let [repeat-pos (some (set path) (get result :visited))]
                (if repeat-pos
                  (reduced (assoc result :pos repeat-pos))
                  (update result :visited #(apply conj % path))))))
            )))
   {:pos [0 0] :dir :N :visited #{}}
   directions))

(let [endpt (first-revisit real-input)]
  (list (distance-to (get endpt :pos))
        endpt))
;; => (152
;;     {:pos [145 7],
;;      :dir :N,
;;      :visited
;;      #{[35 7] [135 -41] [103 7] [130 -41] [8 7] [3 15] [194 8] [129 -29]
;;        [120 -41] [-5 12] [40 7] [-7 8] [185 24] [153 7] [194 -18]
;;        [191 18] [-4 18] [-5 15] [191 12] [10 14] [194 -27] [168 7]
;;        [7 12] [2 18] [186 21] [193 14] [113 7] [125 -32] [53 7]
;;        [194 -25] [-7 11] [194 2] [124 7] [79 7] [194 -23] [-5 11]
;;        [185 7] [147 7] [185 23] [159 -41] [7 13] [-6 8] [133 7]
;;        [190 -41] [22 7] [194 -3] [194 11] [21 7] [146 -41] [120 -37]
;;        [126 7] [147 -25] [142 7] [7 7] [1 22] [188 -41] [75 7] [70 7]
;;        [10 15] [131 -41] [-3 8] [-3 23] [-5 10] [-5 8] [47 7] [139 -41]
;;        [85 7] [194 -38] [18 7] [86 7] [166 -41] [1 23] [-3 6] [193 15]
;;        [194 -12] [189 -41] [129 -28] [59 7] [184 15] [6 7] [143 7]
;;        [1 21] [159 7] [194 -22] [78 7] [88 7] [25 7] [173 7] [9 15]
;;        [-2 23] [0 6] [191 20] [-6 9] [194 3] [76 7] [72 7] [188 23]
;;        [-1 0] [191 9] [127 -41] [5 10] [171 -41] [-3 9] [134 -25]
;;        [163 -41] [142 -41] [187 21] [155 -41] [123 -41] [58 7] [134 -26]
;;        [43 7] [-2 7] [0 5] [143 -23] [194 -1] [122 -41] [146 -24]
;;        [182 7] [197 -41] [-5 14] [187 -41] [191 22] [143 -20] [194 -36]
;;        [-4 23] [124 -33] [152 7] [186 7] [193 13] [194 -11] [171 7]
;;        [96 7] [136 -41] [-4 21] [164 -41] [190 23] [194 5] [122 -34]
;;        [107 7] [16 7] [122 -36] [185 21] [-4 6] [-6 10] [129 7] [1 15]
;;        [194 10] [148 7] [110 7] [167 7] [143 -22] [67 7] [-3 0] [9 16]
;;        [170 -41] [177 7] [161 7] [97 7] [194 -33] [26 7] [-6 17] [82 7]
;;        [185 -41] [193 16] [181 7] [-6 11] [147 -24] [194 -14] [128 -29]
;;        [195 -41] [154 -41] [194 -31] [-1 23] [141 -20] [65 7] [172 7]
;;        [134 -27] [133 -28] [93 7] [189 18] [-1 7] [194 -35] [144 -41]
;;        [131 -28] [185 20] [194 12] [189 17] [92 7] [178 7] [32 7]
;;        [194 -4] [135 -22] [80 7] [13 7] [194 -37] [29 7] [158 7] [94 7]
;;        [125 -30] [115 7] [61 7] [91 7] [183 18] [108 7] [194 9]
;;        [157 -41] [134 -41] [4 15] [19 7] [194 -5] [182 -41] [191 -41]
;;        [186 23] [169 7] [-1 2] [-4 15] [198 -41] [178 -41] [190 17]
;;        [160 7] [194 -34] [-4 10] [153 -41] [188 14] [132 -41] [131 7]
;;        [145 -41] [125 -33] [90 7] [3 17] [-4 19] [31 7] [125 7]
;;        [121 -41] [87 7] [120 -38] [145 -24] [-3 10] [164 7] [5 16]
;;        [98 7] [64 7] [191 21] [140 -20] [166 7] [-5 13] [194 -41]
;;        [184 -41] [1 20] [172 -41] [138 -41] [188 13] [15 7] [-4 22]
;;        [81 7] [194 7] [173 -41] [122 -37] [111 7] [5 7] [194 0] [95 7]
;;        [54 7] [10 16] [12 7] [139 -20] [134 7] [-4 0] [57 7] [183 16]
;;        [10 7] [193 -41] [183 -41] [-4 2] [36 7] [194 -9] [188 15]
;;        [141 7] [176 7] [120 -40] [9 14] [8 16] [135 -23] [147 -41]
;;        [138 -21] [127 -29] [187 22] [132 -28] [194 -15] [128 -41]
;;        [162 7] [190 12] [1 18] [-5 18] [162 -41] [74 7] [125 -41] [46 7]
;;        [100 7] [145 -25] [-7 7] [30 7] [0 3] [129 -41] [193 12]
;;        [160 -41] [125 -29] [71 7] [124 -41] [73 7] [5 11] [1 16] [5 8]
;;        [77 7] [194 -32] [151 7] [193 17] [2 15] [150 7] [8 15] [133 -41]
;;        [28 7] [168 -41] [0 7] [128 7] [3 18] [135 7] [84 7] [185 15]
;;        [66 7] [187 20] [192 -41] [-5 6] [194 -6] [194 6] [196 -41]
;;        [194 -21] [41 7] [120 7] [2 17] [136 -22] [123 7] [5 9] [112 7]
;;        [191 11] [127 7] [5 15] [134 -28] [183 7] [-4 16] [-4 20]
;;        [143 -24] [142 -20] [138 -22] [0 23] [190 7] [198 -40] [186 20]
;;        [138 -20] [187 23] [-3 2] [34 7] [194 -16] [-2 2] [38 7] [156 7]
;;        [185 19] [179 7] [155 7] [20 7] [-3 7] [137 -41] [194 -17]
;;        [184 19] [186 -41] [194 -26] [11 7] [89 7] [9 7] [68 7] [-5 16]
;;        [-6 6] [194 -2] [194 -20] [-6 16] [50 7] [109 7] [118 7] [188 12]
;;        [121 -37] [138 7] [-4 1] [45 7] [180 7] [152 -41] [145 7] [0 2]
;;        [69 7] [174 -41] [130 -28] [-7 9] [137 -22] [24 7] [176 -41]
;;        [117 7] [101 7] [191 7] [165 -41] [123 -33] [23 7] [196 -38]
;;        [0 4] [44 7] [55 7] [116 7] [104 7] [163 7] [144 -25] [56 7]
;;        [-6 18] [181 -41] [184 7] [60 7] [191 17] [146 -25] [154 7]
;;        [49 7] [190 22] [146 7] [33 7] [143 -41] [186 15] [167 -41]
;;        [150 -41] [194 -28] [194 -30] [170 7] [1 17] [126 -41] [122 -33]
;;        [130 7] [191 8] [194 -24] [114 7] [126 -29] [186 24] [51 7]
;;        [7 14] [6 12] [194 -13] [37 7] [42 7] [148 -41] [63 7] [174 7]
;;        [121 7] [102 7] [143 -25] [188 7] [191 19] [194 -10] [27 7]
;;        [189 12] [149 7] [7 16] [158 -41] [125 -31] [189 23] [140 -41]
;;        [137 7] [7 15] [-7 10] [99 7] [177 -41] [140 7] [191 10]
;;        [151 -41] [165 7] [180 -41] [183 15] [39 7] [135 -24] [197 -38]
;;        [194 1] [187 15] [175 -41] [139 7] [14 7] [179 -41] [195 -38]
;;        [144 7] [6 16] [134 -24] [-4 8] [120 -39] [161 -41] [141 -41]
;;        [194 -8] [52 7] [143 -21] [106 7] [5 12] [48 7] [122 -35] [132 7]
;;        [189 7] [169 -41] [183 19] [198 -39] [183 17] [186 22] [-2 0]
;;        [194 -19] [105 7] [62 7] [175 7] [194 -29] [194 4] [-7 6] [187 7]
;;        [122 7] [185 22] [157 7] [149 -41] [198 -38] [194 -7] [1 19]
;;        [156 -41] [136 7] [119 7] [190 18] [83 7] [192 17] [17 7]}})
